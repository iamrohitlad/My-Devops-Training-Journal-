Ports in Linux 
Ports are logical endpoints for communication used by network protocols to manage data 
exchange between devices over a network. Each port is identified by a number, ranging from 
0 to 65535, and is associated with a specific protocol and service. 
Common Port Numbers 
• HTTP: Port 80 
• HTTPS: Port 443 
• SSH: Port 22 
• FTP: Port 21 

Ports below 1024 are known as "well-known ports" and are reserved for system or well
known services. Ports from 1024 to 49151 are "registered ports," and ports from 49152 to 
65535 are "dynamic or private ports." 

SSH (Secure Shell) 
SSH is a cryptographic network protocol used for secure data communication, remote 
command-line login, and other secure network services between two networked computers. 
SSH operates on port 22 by default and uses strong encryption to protect the data 
transmitted over the network.

Key Features of SSH: 
• Encrypted Communication: Ensures that data sent over the network is encrypted 
and secure. 
• Authentication: Uses public key authentication, making it more secure than 
password-based login. 
• Port Forwarding: Allows secure forwarding of ports from the client machine to the 
remote server.

SSH Key Pair 
SSH key pairs are a set of cryptographic keys used to authenticate a user in SSH. They consist 
of a private key (kept secret) and a public key (shared with the remote server). 
Generating SSH Key Pair 
To generate an SSH key pair in Ubuntu: 
ssh-keygen -t rsa -b 4096 -C "your_email@example.com" 
This command generates a public-private key pair: 
• Public Key: Stored in ~/.ssh/id_rsa.pub 
• Private Key: Stored in ~/.ssh/id_rsa 
You will be prompted to enter a file path to save the key and an optional passphrase for 
additional security. 

Using SSH Key Pair 
1. Add the Public Key to the Remote Server: 
ssh-copy-id user@remote_host 
This command appends the public key to the ~/.ssh/authorized_keys file on the remote 
server. 
2. Connect to the Remote Server Using SSH Key: 
ssh user@remote_host

Example in Ubuntu 
1. Generate SSH Key Pair: 
ssh-keygen -t rsa -b 4096 -C "your_email@example.com" 
2. Add the Public Key to the Remote Server: 
ssh-copy-id user@192.168.1.100 
3. Connect to the Remote Server: 
ssh user@192.168.1.100

Security Groups, Inbound Rules, and Outbound Rules 
Security groups act as virtual firewalls for instances to control inbound and outbound traffic. 
They are commonly used in cloud environments (e.g., AWS, Azure, Google Cloud) to manage 
access to resources. 

Inbound Rules 
Inbound rules control the incoming traffic to an instance. These rules specify which ports 
and protocols are allowed to receive traffic and from which sources (IP addresses). 

Outbound Rules 
Outbound rules control the outgoing traffic from an instance. These rules specify which 
ports and protocols are allowed to send traffic and to which destinations. 

Example Configuration 
1. Inbound Rule: 
o Allow SSH access on port 22. 
o Allow HTTP access on port 80. 
2. Outbound Rule: 
o Allow all outgoing traffic. 

Ports 
Ports are essential for network communication, allowing different services to run 
simultaneously on a single machine. For example, a web server running on port 80 (HTTP) 
can coexist with an SSH server running on port 22. 

SSH and SSH Key Pair 
SSH is widely used for secure remote login and command execution. Instead of passwords, 
SSH keys offer stronger security. The private key remains on the user's machine, while the 
public key is placed on the remote server. When the user attempts to connect, the server 
verifies the user's identity by matching the public key with the private key. 

Security Groups, Inbound, and Outbound Rules 
Security groups manage traffic to and from instances. Inbound rules define what traffic is 
allowed to reach the instance, while outbound rules define what traffic is allowed to leave. 
For example, allowing inbound SSH access on port 22 lets users remotely manage the 
instance, while allowing HTTP access on port 80 enables the instance to serve web pages. 
This structure provides a clear and secure way to manage network traffic and access control 
in a Linux environment, ensuring both functionality and security.

STEPS FOR CREATING A VIRTUAL MACHINE (VM) INTO AN AWS 


Creating a Virtual Machine (VM), also known as an EC2 instance, in AWS involves several 
steps. Here’s a detailed guide to help you through the process. 
Step 1: Sign in to AWS Management Console 
• Go to the AWS Management Console. 
• Sign in with your AWS account credentials. 
Step 2: Navigate to EC2 Dashboard 
• In the AWS Management Console, type "EC2" in the search bar and select "EC2" to 
go to the EC2 Dashboard. 
Step 3: Launch an Instance 
• Click on the "Launch Instance" button. 
Step 4: Choose an Amazon Machine Image (AMI) 
• Select an AMI that serves as the base image for your instance. Amazon Linux 2 is a 
common choice for general purposes. 
• You can also choose from other options like Ubuntu, Windows, or other pre
configured AMIs. 
Step 5: Choose an Instance Type 
• Select an instance type based on the required vCPU and memory. The "t2.micro" 
instance type is a common choice for free tier eligibility. 
• Click "Next: Configure Instance Details." 
Step 6: Configure Instance Details 
• Specify the number of instances to launch. 
• Configure the network settings: 
o Network: Select the VPC (Virtual Private Cloud) where the instance will be 
launched. 
o Subnet: Select a subnet within the VPC. 
o Auto-assign Public IP: Enable if you want the instance to have a public IP 
address. 
• Configure other settings as needed, such as IAM roles, shutdown behavior, and 
enable monitoring if required. 
• Click "Next: Add Storage." 
Step 7: Add Storage 
• Configure the storage for your instance. By default, an EBS (Elastic Block Store) 
volume is attached. 
o Size (GiB): Specify the size of the root volume. 
o Volume Type: Select the volume type, such as General Purpose SSD (gp2). 
• Add additional volumes if required. 
• Click "Next: Add Tags." 
Step 8: Add Tags 
• Add tags to help manage your instances. Tags are key-value pairs. 
o Example: Key = Name, Value = MyInstance 
• Click "Next: Configure Security Group." 
Step 9: Configure Security Group 
• Create a new security group or select an existing one. 
o Security Group Name: Enter a name for the security group. 
o Description: Enter a description for the security group. 
o Inbound Rules: Add rules to allow specific traffic to your instance. 
▪ Example: Allow SSH traffic on port 22 from a specific IP address. 
▪ Type: SSH 
▪ Protocol: TCP 
▪ Port Range: 22 
▪ Source: MyIP (select your IP) 
o Outbound Rules: By default, all outbound traffic is allowed. 
• Click "Review and Launch." 
Step 10: Review and Launch 
• Review the instance details, storage, tags, and security group configuration. 
• Click "Launch." 
Step 11: Select a Key Pair 
• Select an existing key pair or create a new one to securely connect to your instance 
via SSH. 
o Create a New Key Pair: If you don’t have an existing key pair, create a new 
one, download the .pem file, and store it securely. 
o Select an Existing Key Pair: If you already have a key pair, select it from the 
list. 
• Acknowledge that you have access to the selected key pair. 
• Click "Launch Instances." 
Step 12: View Instance 
• Click "View Instances" to go to the EC2 Dashboard where you can see the status of 
your newly launched instance. 
• Wait for the instance state to become "running." 

CONNECTING TO YOUR EC2 INSTANCE : 
Once the instance is running, you can connect to it using SSH. 
Step 1: Locate the Public IP 
• Go to the EC2 Dashboard. 
• Select the running instance and find its Public IP address. 
Step 2: Connect via SSH 
• Open a terminal on your local machine. 
• Use the SSH command to connect to the instance. 
ssh -i /path/to/your-key-pair.pem ec2-user@your-instance-public-ip 
Replace /path/to/your-key-pair.pem with the path to your downloaded key pair and your
instance-public-ip with the instance’s public IP address.
